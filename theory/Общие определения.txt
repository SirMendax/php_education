Переменная это именованная область в памяти для хранения данных. Имя переменной должно начинаться с буквы или символа подчеркивания, состоять из букв, цифр и символов подчеркивания. Перед именем переменной необходимо использовать символ $.

Область видимости переменной, это место в котором переменная определена. Например, внутри функции или за ее пределом.

Переменные извне - это данные полученные из формы с помощью GET и POST, данные полученные из COOKIE. 

GET передает данных из адресной строки в виде строки с параметрами. POST передает данные используя HTTP  тело запроса (например, обычно через html форму). GET может передавать только данные объемом 1024 символов. POST может отправлять данные большого размера, который обычно установлен в настройках сервера.

Константы - это уникальное имя, которое содержит какие-то данные. Константы можно использовать двумя способами:

Способ 1:
define('BLOCK', 'значение константы'); // установка константы
echo BLOCK; // вывод значения константы

Способ 2:
const BLOCK = 'значение константы';
echo BLOCK; // вывод значения константы


Список волшебных констант:

1) __LINE__  Текущий номер строки в файле.
2) __FILE__ Полный путь и имя текущего файла с развернутыми симлинками. Внутри подключаемого файла возвращается имя данного файла.
3) __DIR__ Директория файла. Внутри подключаемого файла возвращается директория этого файла.
4) __FUNCTION__ Имя функции или {closure} в случае анонимной функции.
5) __CLASS__ Имя класса, содержит название пространства имен, в котором класс был объявлен (например, Block\Aside).
6) __TRAIT__ Имя трейта, содержит название пространства имен, в котором трейт был объявлен (например, Block\Aside).
7) __METHOD__ Имя метода класса.
8) __NAMESPACE__ Имя текущего пространства имен.
9) ClassName::class Полное имя класса (с указанием пространства имен).


В PHP есть следующие виды операторов:

    1) оператор присваивания
    2) арифметические операторы
    3) логические операторы
    4) побитовые операторы
    5) операторы сравнения
    6) оператор управления ошибками (обозначается знаком @ и позволяет игнорировать вывод ошибок для используемых функций)
    7) операторы инкремента и декремента
    8) строковые операторы
    9) операторы массивов
    10) оператор проверки типа (instanceof)
    11) оператор исполнения (позволяет выполнить строку, заключенную в кавычки `` и возвращает полученный вывод)

Подключение файлов
    require() просто подключает в текущий файл указанный
    require_once() подлключает указанный файл в текущий только в том случает, если он не был ранее подключен
    include() работает также как и require(), подключает файл и в случае ошибки возвращает WARNING, в то время как require() возвращает FATAL ERROR
    include_once() работает также как и require_once(), подключает файл если он не был ранее подключен и возвращает WARNING, в то время как require_once() возвращает FATAL ERROR.

    
Конструкция goto

<?php
goto a;
echo 'Первый вывод';
 
a:
echo 'Место куда делается переход';
?>

Функция - это набор операторов, выполняющих определенные действия. Функция начинается с ключевого слова function, за которым следует имя функции, а за ней круглые скобки с передаваемыми параметрами внутрь функции.

Аргументы функции это данные, передаваемые внутрь функции в виде списка параметров. Аргументы разделяются запятыми и вычисляются слева на право.

Передача аргументов в функцию осуществляется: по значению (часто используемый), по ссылке, значения по умолчанию.

<?php
function my_block($text1, $text2, $text3)
{
    return $text1 . $text2 . $text3;
}

// выведет 'Съешь этих мягких,французских булок.'
echo my_block('Съешь этих мягких', 'французских',  'булок');

?>

<?php
function my_block(&$text)
{
    $text .= 'французских булок.';
}
$text = 'Съешь этих мягких, ';
my_block($text);
echo $text;    // выведет 'Съешь этих мягких,французских булок.'

?>

Анонимная функция, или по другому, замыкания (closures), представляет собой функцию не имеющую имени и используемую для значений callback-параметров
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'cookie-down');
// выведет cookiedown
?>

Обращение к функциям через переменные

<?php
function foo() {
    echo "В foo()<br />\n";
}

function bar($arg = '')
{
    echo "В bar(); аргумент был '$arg'.<br />\n";
}

// Функция-обертка для echo
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // Вызывает функцию foo()

$func = 'bar';
$func('test');  // Вызывает функцию bar()

$func = 'echoit';
$func('test');  // Вызывает функцию echoit()
?>


Класс это модель еще не существующего объекта, описывающая устройство бъекта - его методы и свойства.

Объект это данные и методы для их обработки.
