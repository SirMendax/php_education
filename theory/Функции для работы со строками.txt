1) count_chars — Возвращает информацию о символах, входящих в строку
В зависимости от параметра mode, count_chars() возвращает одно из следующих значений:

    0 - массив, индексами которого являются ASCII-коды, а значениями - число вхождений соответствующего символа.
    1 - то же, что и для 0, но информация о символах с нулевым числом вхождений не включается в массив.
    2 - то же, что и для 0, но в массив включается информация только о символах с нулевым числом вхождений.
    3 - строка, содержащая все уникальные символы в исследуемой строке.
    4 - строка, состоящая из символов, которые не входят в исходную строку.

2)  echo ( string $arg1 [, string $... ] ) : void  и   print ( string $arg ) : int

echo выводит все аргументы. Символ конца строки не добавляется.

На самом деле, echo - это не функция (это языковая конструкция), поэтому заключать аргументы в скобки необязательно. echo (в отличие от других языковых конструкций) не ведет себя как функция, поэтому не всегда может быть использована в контексте функции. Вдобавок, если вы хотите передать более одного аргумента в echo, эти аргументы нельзя заключать в скобки. 

 print на самом деле не является настоящей функцией (это конструкция языка), поэтому заключать аргументы в скобки необязательно.

Главное отличие от echo в том, что print принимает только один аргумент и всегда возвращает 1. 

3)  explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] ) : array

Возвращает массив строк, полученных разбиением строки string с использованием delimiter в качестве разделителя. 
<?php
// Пример 1
$pizza  = "кусок1 кусок2 кусок3 кусок4 кусок5 кусок6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // кусок1
echo $pieces[1]; // кусок2

4)  implode ( string $glue , array $pieces ) : string

Возвращает строку, содержащую строковое представление всех элементов массива в указанном порядке, со строкой glue между каждым элементом. 

glue - По умолчанию равен пустой строке.
pieces - Массив объединяемых строк.

join — Псевдоним implode()

5)  fprintf ( resource $handle , string $format [, mixed $... ] ) : int

Записывает строку, созданную с использованием строки формата format, в поток, дескриптор которого передается в параметре handle. 
handle - Указатель (resource) на файл, обычно создаваемый с помощью функции fopen().
format - Строка формата состоит из нуля или более директив: обычные символы (за исключением %), которые просто выводятся без изменения и спецификаторы преобразования, каждый из которых требует передачи своего параметра. 

6)  lcfirst ( string $str ) : string - возвращает строку str, первый символ которой был преобразован в нижний регистр, если этот символ является буквой. 

7) ucfirst ( string $str ) : string - Преобразует первый символ строки в верхний регистр

8) strtolower() - Преобразует строку в нижний регистр
9) strtoupper() - Преобразует строку в верхний регистр
10) ucwords() - Преобразует в верхний регистр первый символ каждого слова в строке

11) ltrim ( string $str [, string $character_mask ] ) : string - удаляет пробелы (или другие символы) из начала строки. 
 Эта функция возвращает строку str с удаленными из начала строки пробелами. Если второй параметр не передан, ltrim() удаляет следующие символы:

    " " (ASCII 32 (0x20)), обычный пробел.
    "\t" (ASCII 9 (0x09)), символ табуляции.
    "\n" (ASCII 10 (0x0A)), символ перевода строки.
    "\r" (ASCII 13 (0x0D)), символ возврата каретки.
    "\0" (ASCII 0 (0x00)), NUL-байт.
    "\x0B" (ASCII 11 (0x0B)), вертикальная табуляция.

12) rtrim ( string $str [, string $character_mask ] ) : string
Эта функция возвращает строку str с удаленными из конца строки пробельными (или другими) символами.
Если второй параметр не передан, rtrim() удаляет следующие символы:
    " " (ASCII 32 (0x20)), обычный пробел.
    "\t" (ASCII 9 (0x09)), символ табуляции.
    "\n" (ASCII 10 (0x0A)), символ перевода строки.
    "\r" (ASCII 13 (0x0D)), символ возврата каретки.
    "\0" (ASCII 0 (0x00)), NULL-байт.
    "\x0B" (ASCII 11 (0x0B)), вертикальная табуляция.

13)  trim ( string $str [, string $character_mask = " \t\n\r\0\x0B" ] ) : string

Эта функция возвращает строку str с удаленными из начала и конца строки пробелами. Если второй параметр не передан, trim() удаляет следующие символы:

    " " (ASCII 32 (0x20)), обычный пробел.
    "\t" (ASCII 9 (0x09)), символ табуляции.
    "\n" (ASCII 10 (0x0A)), символ перевода строки.
    "\r" (ASCII 13 (0x0D)), символ возврата каретки.
    "\0" (ASCII 0 (0x00)), NUL-байт.
    "\x0B" (ASCII 11 (0x0B)), вертикальная табуляция.

14)  str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] ) : mixed

Эта функция возвращает строку или массив, в котором все вхождения search в subject заменены на replace. 

15)  preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] ) : mixed

Выполняет поиск совпадений в строке subject с шаблоном pattern и заменяет их на replacement. 

<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>

16)  str_repeat ( string $input , int $multiplier ) : string

Возвращает строку input, повторенную multiplier раз. 

17)  str_getcsv ( string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] ) : array

Данная функция выполняет разбор строки в формате CSV и возвращает массив с полученными из строки полями. 

18)  str_split ( string $string [, int $split_length = 1 ] ) : array

Преобразует строку в массив. 

19)  strlen ( string $string ) : int

Возвращает длину строки string. 

20)  strip_tags ( string $str [, string $allowable_tags ] ) : string

Эта функция пытается возвратить строку, из которой удалены все NULL-байты, HTML- и PHP-теги. Для удаления тегов используется тот же механизм, что и в функции fgetss(). 

21)  strpos ( string $haystack , mixed $needle [, int $offset = 0 ] ) : int

Ищет позицию первого вхождения подстроки needle в строку haystack. 

22)  strrev ( string $string ) : string

Возвращает строку string, перевернутую задом наперед. 

23)  strstr ( string $haystack , mixed $needle [, bool $before_needle = FALSE ] ) : string

Возвращает подстроку строки haystack, начиная с первого вхождения needle (и включая его) и до конца строки haystack. 

24)  substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] ) : int

substr_count() возвращает число вхождений подстроки needle в строку haystack. Заметьте, что параметр needle чувствителен к регистру. 

25)  substr ( string $string , int $start [, int $length ] ) : string

Возвращает подстроку строки string, начинающейся с start символа по счету и длиной length символов. 

26)  substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] ) : mixed

substr_replace() заменяет часть строки string, начинающуюся с символа с порядковым номером start и (необязательной) длиной length, строкой replacement и возвращает результат. 
